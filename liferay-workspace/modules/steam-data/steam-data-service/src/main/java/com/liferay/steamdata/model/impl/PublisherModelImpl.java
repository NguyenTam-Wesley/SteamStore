/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.steamdata.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.steamdata.model.Publisher;
import com.liferay.steamdata.model.PublisherModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Publisher service. Represents a row in the &quot;Liferay_Publisher&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PublisherModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublisherImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PublisherImpl
 * @generated
 */
public class PublisherModelImpl
	extends BaseModelImpl<Publisher> implements PublisherModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a publisher model instance should use the <code>Publisher</code> interface instead.
	 */
	public static final String TABLE_NAME = "Liferay_Publisher";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"publisherId", Types.VARCHAR},
		{"publisherName", Types.VARCHAR}, {"linkWebsite", Types.VARCHAR},
		{"publisherInfo", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publisherId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publisherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linkWebsite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publisherInfo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Liferay_Publisher (uuid_ VARCHAR(75) null,publisherId VARCHAR(75) not null primary key,publisherName VARCHAR(75) null,linkWebsite VARCHAR(75) null,publisherInfo VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Liferay_Publisher";

	public static final String ORDER_BY_JPQL =
		" ORDER BY publisher.publisherId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Liferay_Publisher.publisherId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PUBLISHERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PublisherModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _publisherId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPublisherId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publisherId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Publisher.class;
	}

	@Override
	public String getModelClassName() {
		return Publisher.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Publisher, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Publisher, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Publisher, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Publisher)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Publisher, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Publisher, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Publisher)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Publisher, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Publisher, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Publisher, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Publisher, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Publisher, Object>>();

			attributeGetterFunctions.put("uuid", Publisher::getUuid);
			attributeGetterFunctions.put(
				"publisherId", Publisher::getPublisherId);
			attributeGetterFunctions.put(
				"publisherName", Publisher::getPublisherName);
			attributeGetterFunctions.put(
				"linkWebsite", Publisher::getLinkWebsite);
			attributeGetterFunctions.put(
				"publisherInfo", Publisher::getPublisherInfo);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Publisher, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Publisher, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Publisher, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Publisher, String>)Publisher::setUuid);
			attributeSetterBiConsumers.put(
				"publisherId",
				(BiConsumer<Publisher, String>)Publisher::setPublisherId);
			attributeSetterBiConsumers.put(
				"publisherName",
				(BiConsumer<Publisher, String>)Publisher::setPublisherName);
			attributeSetterBiConsumers.put(
				"linkWebsite",
				(BiConsumer<Publisher, String>)Publisher::setLinkWebsite);
			attributeSetterBiConsumers.put(
				"publisherInfo",
				(BiConsumer<Publisher, String>)Publisher::setPublisherInfo);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getPublisherId() {
		if (_publisherId == null) {
			return "";
		}
		else {
			return _publisherId;
		}
	}

	@Override
	public void setPublisherId(String publisherId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publisherId = publisherId;
	}

	@Override
	public String getPublisherName() {
		if (_publisherName == null) {
			return "";
		}
		else {
			return _publisherName;
		}
	}

	@Override
	public void setPublisherName(String publisherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publisherName = publisherName;
	}

	@Override
	public String getLinkWebsite() {
		if (_linkWebsite == null) {
			return "";
		}
		else {
			return _linkWebsite;
		}
	}

	@Override
	public void setLinkWebsite(String linkWebsite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_linkWebsite = linkWebsite;
	}

	@Override
	public String getPublisherInfo() {
		if (_publisherInfo == null) {
			return "";
		}
		else {
			return _publisherInfo;
		}
	}

	@Override
	public void setPublisherInfo(String publisherInfo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publisherInfo = publisherInfo;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Publisher toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Publisher>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublisherImpl publisherImpl = new PublisherImpl();

		publisherImpl.setUuid(getUuid());
		publisherImpl.setPublisherId(getPublisherId());
		publisherImpl.setPublisherName(getPublisherName());
		publisherImpl.setLinkWebsite(getLinkWebsite());
		publisherImpl.setPublisherInfo(getPublisherInfo());

		publisherImpl.resetOriginalValues();

		return publisherImpl;
	}

	@Override
	public Publisher cloneWithOriginalValues() {
		PublisherImpl publisherImpl = new PublisherImpl();

		publisherImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		publisherImpl.setPublisherId(
			this.<String>getColumnOriginalValue("publisherId"));
		publisherImpl.setPublisherName(
			this.<String>getColumnOriginalValue("publisherName"));
		publisherImpl.setLinkWebsite(
			this.<String>getColumnOriginalValue("linkWebsite"));
		publisherImpl.setPublisherInfo(
			this.<String>getColumnOriginalValue("publisherInfo"));

		return publisherImpl;
	}

	@Override
	public int compareTo(Publisher publisher) {
		String primaryKey = publisher.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Publisher)) {
			return false;
		}

		Publisher publisher = (Publisher)object;

		String primaryKey = publisher.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Publisher> toCacheModel() {
		PublisherCacheModel publisherCacheModel = new PublisherCacheModel();

		publisherCacheModel.uuid = getUuid();

		String uuid = publisherCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			publisherCacheModel.uuid = null;
		}

		publisherCacheModel.publisherId = getPublisherId();

		String publisherId = publisherCacheModel.publisherId;

		if ((publisherId != null) && (publisherId.length() == 0)) {
			publisherCacheModel.publisherId = null;
		}

		publisherCacheModel.publisherName = getPublisherName();

		String publisherName = publisherCacheModel.publisherName;

		if ((publisherName != null) && (publisherName.length() == 0)) {
			publisherCacheModel.publisherName = null;
		}

		publisherCacheModel.linkWebsite = getLinkWebsite();

		String linkWebsite = publisherCacheModel.linkWebsite;

		if ((linkWebsite != null) && (linkWebsite.length() == 0)) {
			publisherCacheModel.linkWebsite = null;
		}

		publisherCacheModel.publisherInfo = getPublisherInfo();

		String publisherInfo = publisherCacheModel.publisherInfo;

		if ((publisherInfo != null) && (publisherInfo.length() == 0)) {
			publisherCacheModel.publisherInfo = null;
		}

		return publisherCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Publisher, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Publisher, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Publisher, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Publisher)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Publisher>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Publisher.class, ModelWrapper.class);

	}

	private String _uuid;
	private String _publisherId;
	private String _publisherName;
	private String _linkWebsite;
	private String _publisherInfo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Publisher, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Publisher)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("publisherId", _publisherId);
		_columnOriginalValues.put("publisherName", _publisherName);
		_columnOriginalValues.put("linkWebsite", _linkWebsite);
		_columnOriginalValues.put("publisherInfo", _publisherInfo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("publisherId", 2L);

		columnBitmasks.put("publisherName", 4L);

		columnBitmasks.put("linkWebsite", 8L);

		columnBitmasks.put("publisherInfo", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Publisher _escapedModel;

}